// Generated by CoffeeScript 1.10.0
(function() {
  var CND, Xmap, alert, badge, debug, demo, echo, help, include, info, join, log, njs_path, rpr, show_keys_and_key_bfrs, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  njs_path = require('path');

  join = njs_path.join;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'Xmap/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  Xmap = require('./main');

  show_keys_and_key_bfrs = function(keys, key_bfrs) {
    var columnify_settings, data, f, i, idx, key, key_txt, len, p;
    f = function(p) {
      var t;
      return ((function() {
        var i, len, ref, results;
        ref = (p.toString('hex')).split(/(..)/);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          t = ref[i];
          if (t !== '') {
            results.push(t);
          }
        }
        return results;
      })()).join(' ');
    };
    columnify_settings = {
      paddingChr: ' '
    };
    data = [];
    key_bfrs = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = key_bfrs.length; i < len; i++) {
        p = key_bfrs[i];
        results.push(f(p));
      }
      return results;
    })();
    for (idx = i = 0, len = keys.length; i < len; idx = ++i) {
      key = keys[idx];
      key_txt = (rpr(key)).replace(/\\u0000/g, '∇');
      data.push({
        'str': key_txt,
        'bfr': key_bfrs[idx]
      });
    }
    help('\n' + CND.columnify(data, columnify_settings));
    return null;
  };

  this["test 1"] = function(T) {
    var d;
    d = new Xmap();
    d.set([1234], 'helo');
    d.set(12.8, 'helo 12.8');
    d.set(true, 'helo true');
    d.set(null, 'helo null');
    d.set(Infinity, "truly huge");
    d.set(['abcäöüz', null, true], 'oops');
    T.eq(d.size, 6);
    T.eq(d.get([1234]), 'helo');
    T.eq(d.get(12.8), 'helo 12.8');
    T.eq(d.get(true), 'helo true');
    T.eq(d.get(null), 'helo null');
    T.eq(d.get(Infinity), "truly huge");
    return T.eq(d.get(['abcäöüz', null, true]), 'oops');
  };

  demo = function() {
    var d;
    d = new Xmap();
    d.set([1234], 'helo');
    d.set(12.8, 'helo 12.8');
    d.set(true, 'helo true');
    d.set(null, 'helo null');
    d.set(Infinity, "truly huge");
    d.set(['abcäöüz', null, true], 'oops');
    help('0713', d.get([1234]));
    help('0713', d.get(['abcäöüz', null, true]));
    help('0713', d.get(['abcäöüz', null, true]));
    urge(d.decode('ETabcÃ¤Ã¶Ã¼z\u0000BD\u0000'));
    help(Array.from(d.keys()));
    help(Array.from(d.values()));
    help(Array.from(d.entries()));
    help(d.size);
    help(d.size = 3);
    help(d.size);
    urge('4432', d);
    return d.forEach(function(value, key, me) {
      return urge(rpr(key), rpr(value));
    });
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  if (module.parent == null) {
    include = [];
    test(this);
  }

}).call(this);
